apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: postsync-validation-deploy-cm
spec:
  refreshInterval: 5s
  secretStoreRef:
    kind: ClusterSecretStore
    name: gcp
  target:
    name: postsync-validation-deploy-cm
    creationPolicy: Owner
  data:
  - secretKey: COLOR
    remoteRef:
      key: COLOR

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postsync-validation-deploy
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postsync
  template:
    metadata:
      labels:
        app: postsync
    spec:
      containers:
      - name: canary-demo
        image: argoproj/rollouts-demo:green
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            memory: 32Mi
            cpu: 5m
        env:
        - name: ERROR_RATE
          value: '0'
        envFrom:
        - secretRef:
            name: postsync-validation-deploy-cm

---

apiVersion: v1
kind: Service
metadata:
  name: postsync-validation-svc
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: postsync

---

apiVersion: v1
kind: Secret
metadata:
  name: default.service-account-token
  annotations:
    kubernetes.io/service-account.name: default
type: kubernetes.io/service-account-token

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: agent
rules:
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtasksets
    verbs:
      - list
      - watch
  - apiGroups:
      - argoproj.io
    resources:
      - workflowtasksets/status
    verbs:
      - patch
  - apiGroups:
      - external-secrets.io
    resources:
      - externalsecrets
    verbs: ["*"]
  - apiGroups:
      - ""
    resources:
      - secrets
      - pods
    verbs: ["*"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: agent-default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: agent
subjects:
  - kind: ServiceAccount
    name: default

---

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: color-validation
  annotations:
     argocd.argoproj.io/hook: PreSync
spec:
  entrypoint: main
  serviceAccountName: default
  ttlStrategy:
    secondsAfterCompletion: 300
  templates:
  - name: main
    steps:
      - - name: create-color-external-secret
          template: create-color-external-secret
      - - name: get-color-secret
          template: get-color-secret
      - - name: evaluate-color
          template: evaluate-color
          arguments:
            parameters:
            - name: color
              value: "{{steps.get-color-secret.outputs.parameters.color}}"

  - name: create-color-external-secret
    resource:
      action: create
      setOwnerReference: true
      successCondition: status.conditions.0.status == True
      failureCondition: status.conditions.0.status == False
      manifest: |
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        metadata:
          name: color-test
        spec:
          refreshInterval: 5s
          secretStoreRef:
            kind: ClusterSecretStore
            name: gcp
          target:
            name: color-test
            creationPolicy: Owner
          data:
          - secretKey: COLOR
            remoteRef:
              key: COLOR
  - name: get-color-secret
    outputs:
      parameters:
      - name: color
        valueFrom:
          jsonPath: '{.data.COLOR}'
    resource:
      action: get
      manifest: |
        apiVersion: v1
        kind: Secret
        metadata:
          name: color-test
  - name: evaluate-color
    inputs:
      parameters:
      - name: color
    container:
      image: ubuntu:20.04
      command:
      - /bin/bash
      - -c
      - |
        set -x
        export COLOR=$(echo "{{inputs.parameters.color}}" | base64 -d -)
        case ${COLOR} in
          red)
            exit 0
            ;;
          yellow)
            exit 0
            ;;
          blue)
            exit 0
            ;;
          green)
            exit 0
            ;;
          purple)
            exit 0
            ;;
          orange)
            exit 0
            ;;
          *)
            echo "${COLOR} is invalid!"
            exit 1
            ;;
        esac

---

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: get-color-validation
  annotations:
     argocd.argoproj.io/hook: PostSync
spec:
  entrypoint: main
  serviceAccountName: default
  ttlStrategy:
    secondsAfterCompletion: 100
  templates:
    - name: main
      steps:
        - - name: get-color
            template: http
            arguments:
              parameters: [{name: url, value: "http://postsync-validation-svc/color"}]
    - name: http
      inputs:
        parameters:
          - name: url
      http:
        url: "{{inputs.parameters.url}}"
        method: "GET"
        successConfidition: "response.statusCode == 200"

---

apiVersion: batch/v1
kind: Job
metadata:
  name: syncfail-validation-hook
  annotations:
     argocd.argoproj.io/hook: SyncFail
spec:
  ttlSecondsAfterFinished: 100
  backoffLimit: 0
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: ubuntu
        image: ubuntu:20.04
        command:
        - /bin/bash
        - -c
        - |
          echo "Oh no! It looks like the sync failed. I'm going to do something about that"